{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","config.js","components/GoodsItem.jsx","components/GoodsList.jsx","components/Cart.jsx","components/BasketItem.jsx","components/BasketList.jsx","components/Alert.jsx","components/Preloader.jsx","components/Shop.jsx","App.js","index.js"],"names":["Header","className","href","id","Footer","Date","getFullYear","process","REACT_APP_API_KEY","GoodsItem","props","name","description","price","full_background","addToBasket","Function","prototype","src","alt","onClick","style","FontSize","GoodsList","goods","length","map","item","Cart","kolichestvo","handleBasketShow","class","BasketItem","removeFromBasket","addKolichestvo","removeKolichestvo","BasketList","order","totalPrise","reduce","sum","elem","Alert","closeAlert","useEffect","timerId","setTimeout","clearTimeout","Preloader","params","Shop","useState","setGoods","loading","setLoading","setOrder","isBasketShow","setBasketShow","alertName","setAlertName","fetch","headers","then","response","json","data","featured","itemIndex","findIndex","orderItem","newItem","newOrder","index","itemId","filter","el","newKolichestvo","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72d41a84.chunk.js","sourcesContent":["function Header() {\r\n    // https://materializecss.com/navbar.html\r\n    return <nav className='green'>\r\n    <div className=\"nav-wrapper\">\r\n      <a href=\"!#\" className=\"brand-logo\">React Shop</a>\r\n      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n        <li><a href=\"!#\">Repo</a></li> {/* ссылку добавлю на репозиторий */}\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n}\r\n\r\nexport {Header}","function Footer() {\r\n    return <footer className=\"page-footer  blue-grey darken-4\">\r\n          \r\n          <div className=\"footer-copyright\">\r\n            <div className=\"container\">\r\n            © {new Date().getFullYear()} Copyright Text\r\n            <a className=\"grey-text text-lighten-4 right\" href=\"#!\">Repo</a>\r\n            </div>\r\n          </div>\r\n\r\n        </footer>\r\n}\r\n\r\nexport {Footer}\r\n\r\n\r\n","const API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst API_URL = 'https://fortniteapi.io/v1/shop?lang=ru';\r\n\r\nexport {\r\n    API_KEY,\r\n    API_URL,\r\n}\r\n","function GoodsItem(props) {\r\n     // деструктурируем пропсы и раскидываю эти данные в карточку ниже\r\n    const { \r\n        id, \r\n        name, \r\n        description, \r\n        price, \r\n        full_background, \r\n        addToBasket = Function.prototype \r\n        } = props;\r\n\r\n    return <div className=\"card\">\r\n    <div className=\"card-image\">\r\n      <img src={full_background} alt={name} />\r\n    </div>\r\n    <div className=\"card-content\">\r\n    <span className=\"card-title\">{name}</span>\r\n      <p> {description} </p>\r\n    </div>\r\n    <div className=\"card-action\">\r\n        <button className='btn' onClick={() => addToBasket({\r\n              id, \r\n              name, \r\n              price, \r\n          })}>Купить</button>\r\n        <span className='right' style={{FontSize: '1.8rem'}}>{price} руб.</span>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport {GoodsItem};","import {GoodsItem} from './GoodsItem'\r\n\r\n// компонент функция через пропсы будет получать массив всх товаров\r\nfunction GoodsList(props) {\r\n    const { goods = [], addToBasket = Function.prototype } = props; //по умолчанию пустой массив\r\n\r\n    // если goods.length пустой (равен 0)\r\n    if (!goods.length) {\r\n        return <h3>Нет товаров</h3>\r\n    }\r\n\r\n    // если есть товары, обходим через мап список товаров\r\n    return <div className=\"goods\">\r\n        {goods.map((item) => ( // для каждого элемента товара мы возвращаем разметку GoodsItem\r\n            <GoodsItem key={item.id} {...item} addToBasket={addToBasket} />\r\n        ))}\r\n    </div>\r\n}\r\n\r\nexport {GoodsList};\r\n// он нам должен возвращать разметку, поэтому нужна одна карточка товара","function Cart(props) {\r\n    const {kolichestvo = 0, handleBasketShow = Function.prototype} = props;\r\n    return <div className='cart blue darken-4 white-text' \r\n                        onClick={handleBasketShow}>\r\n\r\n        <i class=\"material-icons\">add_shopping_cart</i>\r\n        \r\n        {kolichestvo ? <span className='cart-kolichestvo'>{kolichestvo}</span> : null}\r\n    </div>\r\n}\r\n\r\nexport {Cart}","function BasketItem(props) { // корзина\r\n    const {\r\n        id, \r\n        name, \r\n        price, \r\n        kolichestvo, \r\n        removeFromBasket = Function.prototype, \r\n        addKolichestvo = Function.prototype, \r\n        removeKolichestvo = Function.prototype, \r\n    } = props;\r\n\r\n    return (\r\n        <li className=\"collection-item\">\r\n            {name}   <i className='material-icons plusMinusKolichestvo' onClick={() => removeKolichestvo(id)}>remove</i>  x{kolichestvo}  <i className='material-icons plusMinusKolichestvo' onClick={() => addKolichestvo(id)}>add</i>  = {price*kolichestvo}руб    \r\n            <span href=\"#!\" class=\"secondary-content\" onClick={() => removeFromBasket(id)}>\r\n                <i class=\"material-icons basket-delete\">close</i>\r\n            </span>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport {BasketItem};","import {BasketItem} from './BasketItem'\r\n\r\nfunction BasketList(props) {\r\n    const { order = [], \r\n        handleBasketShow = Function.prototype, \r\n        removeFromBasket = Function.prototype, \r\n        addKolichestvo, \r\n        removeKolichestvo, \r\n        } = props; // будет приходить список заказов \r\n\r\n//каждый раз когда мы будем получать список заказов, мы будем его обходить методом reduce\r\n//reduce принимает функцию и значение по умолчанию 0\r\n//sum изначально 0б а потом наращиваем предыдущая сумма плюс перемножаю стоимость на количество\r\n    const totalPrise = order.reduce((sum, elem) => {\r\n        return sum + elem.price * elem.kolichestvo\r\n    }, 0);\r\n\r\n    return <ul className=\"collection backet-list\">\r\n        <li className=\"collection-item active\">Корзина</li>  {/* ключ active отвечает за то что она будет зеленой */}\r\n        \r\n        { // если есть длина у массива order то обходим каждый элемент и на каждый элемент возвращаем BasketItem который будет получать весь набор ключей\r\n            order.length ? order.map(item => (\r\n                <BasketItem \r\n                key={item.id} \r\n                removeFromBasket={removeFromBasket} \r\n                addKolichestvo={addKolichestvo} // добавляем запись в нашу корзину\r\n                removeKolichestvo={removeKolichestvo} // добавляем запись в нашу корзину\r\n                {...item} />// а если массив пустой то выводим надпись Корзина пуста\r\n            )) : <li className=\"collection-item\">Корзина пуста</li>\r\n        }\r\n\r\n        {/* все остальное это элементы корзины которые мы будем в зависимости от ордера динамичесски отрисовывать */}\r\n        \r\n        <li className=\"collection-item active\">Общая стоимость: {totalPrise} руб.\r\n        </li>\r\n\r\n        <li className=\"collection-item\">\r\n        <button className=\"btn btn-small\">Оформить Заказ</button>\r\n        </li>\r\n\r\n        <i className='material-icons basket-close' onClick={handleBasketShow}>close</i>\r\n    </ul>\r\n}\r\n\r\nexport {BasketList}","import {useEffect} from 'react'\r\n\r\nfunction Alert(props) {\r\n    const {name = '', closeAlert = Function.prototype} = props;\r\n\r\n    useEffect(() => {\r\n        const timerId = setTimeout(closeAlert, 3000);\r\n\r\n        return () => { // очищаем всплывашку если новы товар кликнули\r\n            clearTimeout(timerId)\r\n        };\r\n        //что бы не выдавал ошибку\r\n        //eslint-disable-next-line\r\n    }, [name]);\r\n\r\n    return <div id='toast-container'>\r\n        <div className='toast'>{name} добавлен в корзину</div>\r\n    </div>\r\n}\r\n\r\nexport {Alert}","function Preloader(params) {\r\n    return <div className=\"preloader-wrapper active\">\r\n    <div className=\"spinner-layer spinner-red-only\">\r\n      <div className=\"circle-clipper left\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"gap-patch\">\r\n        <div className=\"circle\"></div>\r\n      </div><div className=\"circle-clipper right\">\r\n        <div className=\"circle\"></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport {Preloader}","import {useState, useEffect} from 'react'; //хуки\r\nimport {API_KEY, API_URL} from '../config';\r\nimport {GoodsList} from './GoodsList';\r\nimport {Cart} from './Cart';\r\nimport {BasketList} from './BasketList';\r\nimport {Alert} from './Alert';\r\n\r\nimport {Preloader} from './Preloader';\r\n\r\nfunction Shop() {\r\n    const [goods, setGoods] = useState([]); // берем из useState список товаров и функция обновления этого списка из хука, изначально пустой массив []\r\n\r\n    const [loading, setLoading] = useState(true); // состояние загрузки - уже загружен\r\n\r\n    const [order, setOrder] = useState([]); //еще одно состояние - список заказов и функция\r\n\r\n    const [isBasketShow, setBasketShow] = useState(false); // изначально корзину не показывать\r\n    \r\n    const [alertName, setAlertName] = useState('');\r\n\r\n    const closeAlert = () => {\r\n        setAlertName('');\r\n    };\r\n\r\n    // будем вызывать setBasketShow и будем инвертировать текущее состояние показа корзины isBasketShow\r\n    const handleBasketShow = () => { // просто управляет состояние показа\r\n        setBasketShow(!isBasketShow)\r\n    };\r\n\r\n// отфильтровуем что удалить, el.id не должен быть равен идентификатору события itemId\r\n// у того el у которого он есть вернется значение false и мы его просто не добавим в новый заказ\r\n    const removeFromBasket = (itemId) => { // принимает id и фильтрует по ниму список заказов который был, удаляя ненужный товар и обновляет список заказов\r\n        const newOrder = order.filter(el => el.id !== itemId);\r\n        setOrder(newOrder); \r\n    };\r\n\r\n\r\n\r\n// нов ордер обходит текущий ордер мапом\r\n    const addKolichestvo = (itemId) => { // принимает id и фильтрует по ниму список заказов который был, удаляя ненужный товар и обновляет список заказов\r\n        const newOrder = order.map(el => {\r\n// и если находит элемент у которого такой же id \r\n            if (el.id === itemId) {\r\n// то делает новое количество, которое равно эл количество + 1\r\n                const newKolichestvo = el.kolichestvo + 1;\r\n// тогда возвращаем все ключи эл и обновляем его количество на новое значение\r\n                return {\r\n                    ...el, \r\n                    kolichestvo: newKolichestvo\r\n                }\r\n            } else { // если это не тот эл кот нужен то просто возвращаем эл\r\n                return el;\r\n            }\r\n        }); // таким образом мы формируем новый заказ в котором пересчитался один элемент\r\n        setOrder(newOrder); \r\n    };\r\n\r\n\r\n\r\n    const removeKolichestvo = (itemId) => {\r\n        const newOrder = order.map(el => {\r\n// и если находит элемент у которого такой же id \r\n            if (el.id === itemId) {\r\n// то делает новое количество, которое равно эл количество - 1\r\n                const newKolichestvo = el.kolichestvo - 1;\r\n// тогда возвращаем все ключи эл и обновляем его количество на новое значение\r\n                return {\r\n                    ...el, // если больш 0 то возвращаем newKolichestvo, если меньше то просто ноль \r\n                    kolichestvo: newKolichestvo >= 0 ? newKolichestvo : 0,\r\n                };\r\n            } else { // если это не тот эл кот нужен то просто возвращаем эл\r\n                return el;\r\n            }\r\n        }); // таким образом мы формируем новый заказ в котором пересчитался один элемент\r\n        setOrder(newOrder);  \r\n    };\r\n\r\n\r\n\r\n    // сценарий когда товар добавляется первый раз\r\n    const addToBasket = (item) => {\r\n        // проверяем - есть ли уже этот товар в корзине\r\n        // сравниваем id элемента в корзине с id элемента который мы добавляем, если id найдется то мы получим просто индекс этого элемента массива \r\n        const itemIndex = order.findIndex(\r\n            orderItem => orderItem.id === item.id\r\n            );\r\n\r\n        if (itemIndex < 0) { //если мы в первый раз добавляем товар\r\n            const newItem = { //создаем newItem, добавляем в него все ключи и количество\r\n                ...item, //унаследует все ключи которые у нас есть \r\n                kolichestvo: 1, //и добавим одно поле kolichestvo со значением 1 \r\n            };\r\n            setOrder([...order, newItem]) //функция кот возвращает список товаров который уже есть и добавляет туда новый обьект\r\n        } else {//перебипаем массив, находим id и добавляем в него kolichestvo\r\n            const newOrder = order.map((orderItem, index) => {\r\n                if (index === itemIndex) {\r\n                    return {  //массив orderItem и его orderItem.kolichestvo + 1 \r\n                        ...orderItem, // orderItem со всеми ключами остается неизменным, меняем количество\r\n                        kolichestvo: orderItem.kolichestvo + 1 \r\n                    };\r\n                } else { //если это не первый раз добавляем, а товар уже есть в корзине - возвращаем его как он есть \r\n                    return orderItem;\r\n                }\r\n            })\r\n            // в результате у нас формируется новый массив newOrder и с помощью setOrder \r\n            setOrder(newOrder);\r\n        }\r\n        setAlertName(item.name);\r\n    };\r\n\r\n// всегда принимает функцию и массив зависимостей\r\n// useEffect(() => {}, [])\r\n    useEffect(function getGoods() { // ЗАПРОС после монтирования будем вызывать fetch()\r\n        fetch(API_URL, { // ЗАПРОС делаем по ссылке API_UR. У фетч два параметра - первый просто гет запрос получение данных по ссылке, а второй массив опций\r\n            headers: {\r\n                'Authorization': 'fa826add-e0035e90-79d0d8d2-137d5825',\r\n            }, // полученный ответ преобразую в джейсон (response => response.json())\r\n        }).then(response => response.json()).then(data => {\r\n            data.featured && setGoods(data.featured); //проверяем что он пришел, иначе товары станут undefined\r\n            setLoading(false); // загрузка закончилась, отключаем лоадинг\r\n        }) \r\n        //data.featured => ключ featured взял в postman\r\n\r\n        // полученные данные передаем в наши товары then(data => { setGoods({data.featured}) }); ключ featured взял в программе Postman - по этому ключу придут данные товара\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <main className='container content'>\r\n            <Cart kolichestvo={order.length} handleBasketShow={handleBasketShow} />\r\n         {/* В зависимости от того идет ли процедура загрузки показываем или прилоадер или список товаров */}\r\n        {loading ? <Preloader /> : <GoodsList goods={goods} addToBasket={addToBasket} />}\r\n        { \r\n            isBasketShow && <BasketList \r\n                                order={order} \r\n                                handleBasketShow={handleBasketShow} \r\n    // передаю функцию с удалением заказов в корзину removeFromBasket, \r\n    // и уже после этого ловлю ее в корзине BasketList деструктуризация\r\n                                removeFromBasket={removeFromBasket} \r\n\r\n                                addKolichestvo={addKolichestvo}\r\n                                removeKolichestvo={removeKolichestvo}\r\n                            />\r\n        }\r\n        {// если alertName есть то выдай нам aler и передай в этот alert alertName и closeAlert\r\n            alertName && <Alert name={alertName} closeAlert={closeAlert} />\r\n        }\r\n        </main>\r\n        );\r\n}\r\n\r\nexport {Shop};\r\n","import { Header } from './components/Header';\nimport { Footer } from './components/Footer';\nimport { Shop } from './components/Shop';\n\nfunction App() {\n    return (\n        <> {/* реакт-фрагмент */}\n            <Header />\n            <Shop />\n            <Footer />\n        </>\n    );\n}\n\nexport {App};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}